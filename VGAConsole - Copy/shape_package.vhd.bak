library ieee;
use ieee.std_logic_1164.all;

package shape_package is 
	function radius (x : natural; y : natural; counter : integer;  constnt : natural)
	return boolean;
	
	
	procedure colours(
						constant color         : in  std_logic_vector(2 downto 0);
						signal   r, g, b       : out std_logic_vector(9 downto 0));
	procedure drawCircle(
						variable x, y              : in  natural;
						variable counter           : in  integer;
						constant constnt           : in  natural;
						constant color             : in  std_logic_vector(2 downto 0);
						signal   r, g, b           : out std_logic_vector(9 downto 0));
	
					
	procedure drawBox(
						variable x, y              : in natural;
						constant xStart, xEnd,
								 yStart, yEnd      : in natural;
						constant color             : std_logic_vector(2 downto 0);
						signal r, g, b             : out std_logic_vector(9 downto 0));		
						
	
end package;
---------------------------------
---------------------------------
package body shape_package is
	
--------------------------------------------------------------------------------------------
	function radius (x : natural; y : natural; counter : integer; constnt : natural)
	return boolean is
begin
	
	return ((x-counter)**2 + (y-240)**2 < constnt);
	
end function radius;
---------------------------------------------------------------------------------------------
	procedure colours(
						constant color         : in  std_logic_vector(2 downto 0);
						signal   r, g, b       : out std_logic_vector(9 downto 0)) is
begin
	case(color) is
		when "000" => r <= (others => '0'); g <= (others => '0'); b <= (others => '0');
	    when "001" => r <= (others => '0'); g <= (others => '0'); b <= (others => '1');
	    when "010" => r <= (others => '0'); g <= (others => '1'); b <= (others => '0');
	    when "011" => r <= (others => '0'); g <= (others => '1'); b <= (others => '1');
	    when "100" => r <= (others => '1'); g <= (others => '0'); b <= (others => '0');
	    when "101" => r <= (others => '1'); g <= (others => '0'); b <= (others => '1');
	    when "110" => r <= (others => '1'); g <= (others => '1'); b <= (others => '0');
	    when "111" => r <= (others => '1'); g <= (others => '1'); b <= (others => '1');		
	end case;

end procedure colours;
---------------------------------------------------------------------------------------------
	procedure drawCircle(
						variable x, y               : in  natural;
						variable counter            : in  integer;
						constant constnt            : in  natural;
						constant color              : in  std_logic_vector(2 downto 0);
						signal   r, g, b            : out std_logic_vector(9 downto 0)) is
						
begin
	
	if(radius(x, y, counter, constnt)) then
		colours(color,r,g,b);
	end if;
	
end procedure;
--------------------------------------------------------------------------------------------
	procedure drawBox(
						variable x, y              : in natural;
						constant xStart, xEnd,
								 yStart, yEnd      : in natural;
						constant color             : std_logic_vector(2 downto 0);
						signal   r, g, b           : out std_logic_vector(9 downto 0)) is
begin

	if((xStart < x) and (x < xEnd) and (yStart < y) and (y < yEnd)) then colours(color, r, g, b);
	end if;

end procedure;

	
end package body;
----------------------------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;
--Properties of the circles------------------------------------------------------------------------
package properties_package is
	type colorProperty  is array(0 to 7) of std_logic_vector(2 downto 0);
	type radiusProperty is array(0 to 7) of natural range 0 to 10_000;
	constant color    : colorProperty  := ("000", "001", "010", "011", "100", "101", "110", "111");
	constant radii1   : radiusProperty := (50, 400, 1000, 2000, 3200, 5300, 6400, 7500);
	constant radii2   : radiusProperty := (50, 400, 1000, 2000, 3200, 5300, 6400, 7500);
	constant radii3   : radiusProperty := (50, 400, 1000, 2000, 3200, 5300, 6400, 7500);
end package;
		